name: PHP CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-versions: ['8.2']

    steps:
      - uses: actions/checkout@v4

      - name: Set up PHP ${{ matrix.php-versions }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}

      - name: PHP Security Checker
        uses: StephaneBour/actions-php-security-checker@1.1

      - name: Setup project
        run: make setup

      - name: Check lint
        run: make lint

      - name: Checking static code analysis
        run: make analyse

      - name: Execute tests (Unit and Feature tests) via PHPUnit
        run: make test-coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: build/logs/clover.xml
#          fail_ci_if_error: true

      - name: Publish code coverage
        uses: paambaati/codeclimate-action@v5.0.0
        env:
          CC_TEST_REPORTER_ID: ${{secrets.CC_TEST_REPORTER_ID}}
        with:
          coverageCommand: make test-coverage
          coverageLocations: ${{github.workspace}}/build/logs/clover.xml:clover
          debug: true

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}

    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          cache-from: ${{ secrets.DOCKER_USERNAME }}/task-manager:latest
          cache-to: type=inline
          tags: ${{ secrets.DOCKER_USERNAME }}/task-manager:latest

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script_stop: true
          script: |
            docker stop task-manager-prod | true
            docker rm task-manager-prod | true
            docker pull ${{ secrets.DOCKER_USERNAME }}/task-manager:latest
            docker run -d \
            -p 8000:8000 \
            --name task-manager-prod \
            ${{ secrets.DOCKER_USERNAME }}/task-manager:latest
            docker exec task-manager-prod make setup
